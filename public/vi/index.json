[{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/","title":"AWS Workshop - Triển khai Spring Boot","tags":[],"description":"","content":"Chào mừng đến với AWS Workshop Tổng quan Workshop này sẽ hướng dẫn bạn triển khai dự án Spring Boot lên AWS với Elastic Beanstalk và Aurora Serverless MySQL. Bạn sẽ học cách xây dựng một infrastructure hoàn chỉnh từ VPC, database, application deployment và dọn dẹp tài nguyên.\nWorkshop chính Triển khai Spring Boot lên AWS với Elastic Beanstalk và Aurora Serverless MySQL\nHướng dẫn chi tiết từng bước để:\nTạo VPC tùy chỉnh với bảo mật cao Thiết lập Aurora Serverless MySQL database Deploy ứng dụng Spring Boot lên Elastic Beanstalk Test ứng dụng với database Cấu hình CI/CD tự động hóa Dọn dẹp tài nguyên AWS "},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/1-gioi-thieu/","title":"Giới thiệu","tags":[],"description":"","content":"Triển khai Spring Boot lên AWS với Elastic Beanstalk, Aurora Serverless MySQL và CI/CD Tổng quan Workshop này sẽ hướng dẫn bạn triển khai một ứng dụng Spring Boot lên AWS sử dụng Elastic Beanstalk, kết nối với Aurora Serverless MySQL và thiết lập CI/CD pipeline với GitHub Actions.\nCác bước thực hiện Chuẩn bị môi trường - Cài đặt công cụ và cấu hình AWS Tạo VPC tùy chỉnh - Xây dựng network infrastructure Tạo Security Groups - Cấu hình bảo mật mạng Tạo Aurora Serverless MySQL - Thiết lập database Aurora Deploy Elastic Beanstalk - Triển khai ứng dụng Spring Boot Test ứng dụng - Kiểm tra ứng dụng với database Cấu hình CI/CD - Tự động hóa deployment với GitHub Actions Dọn dẹp tài nguyên - Xóa các tài nguyên AWS Kết quả mong đợi Sau khi hoàn thành workshop, chúng ta sẽ có:\nỨng dụng Spring Boot chạy trên AWS Elastic Beanstalk Database Aurora Serverless MySQL với Data API VPC tùy chỉnh với bảo mật cao CI/CD pipeline tự động với GitHub Actions Query Editor để quản lý database Yêu cầu trước khi bắt đầu Tài khoản AWS Tài khoản GitHub (để CI/CD) Kiến thức cơ bản về Spring Boot Hiểu biết cơ bản về AWS services "},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/2-chuan-bi-moi-truong/","title":"Chuẩn bị môi trường","tags":[],"description":"","content":"Tổng quan Chuẩn bị môi trường và source code trước khi triển khai lên AWS.\nYêu cầu AWS Account - Có quyền truy cập EC2, RDS, Elastic Beanstalk, VPC, IAM GitHub Account - Để lưu trữ source code và CI/CD Git - Quản lý source code Java 21 - Runtime cho Spring Boot Maven - Build tool Tải và cấu hình Source Code 1. Tải dự án # Clone từ GitHub git clone https://github.com/kietlqag/AWS_Workshop.git # Hoặc tải ZIP: https://github.com/kietlqag/AWS_Workshop/archive/main.zip 2. Kiểm tra dự án # Build project mvn clean package -DskipTests # Kiểm tra JAR file ls -la target/CarRentalWeb-1.0.0.jar 3. Cấu trúc dự án quan trọng CarRentalWeb/\r├── pom.xml # Cấu hình Maven\r├── Procfile # Khởi động Elastic Beanstalk\r├── src/main/\r│ ├── java/hcmute/edu/vn/CarRentalWeb/\r│ │ ├── CarRentalWebApplication.java # Lớp chính\r│ │ ├── SecurityConfig.java # Cấu hình bảo mật\r│ │ ├── controller/ # REST Controllers\r│ │ ├── service/ # Logic nghiệp vụ\r│ │ ├── repository/ # Truy cập dữ liệu\r│ │ ├── entity/ # JPA Entities\r│ │ ├── dto/ # Data Transfer Objects\r│ │ ├── strategy/ # Design Patterns\r│ │ ├── observer/ # Design Patterns\r│ │ ├── singleton/ # Design Patterns\r│ │ └── decorator/ # Design Patterns\r│ └── resources/\r│ ├── application.properties # Cấu hình DB \u0026amp; Email\r│ ├── static/ # CSS, JS, Hình ảnh\r│ └── templates/ # Thymeleaf templates\r├── .ebextensions/ # Cấu hình Elastic Beanstalk\r│ ├── 01_environment.config # Biến môi trường\r│ ├── 02_vpc.config # Cấu hình VPC\r│ ├── 03_port.config # Cài đặt port\r│ ├── 04_nginx.config # Cấu hình Nginx\r│ ├── 05_force_port.config # Ép port 5000\r│ ├── 06_selinux.config # Cài đặt SELinux\r│ └── nginx/conf.d/\r│ └── proxy.conf # Cấu hình proxy tùy chỉnh\r└── .github/workflows/ # CI/CD workflows\r└── deploy.yml # GitHub Actions Cấu hình GitHub 1. Tạo Repository Tạo repository mới Push source code lên GitHub 2. Kiểm tra git --version java --version # Java 21 mvn --version Lưu ý Java 21: Đảm bảo sử dụng đúng version Maven: Cần để build project Git: Để quản lý source code và CI/CD Bước tiếp theo Khi đã chuẩn bị xong môi trường và source code, chúng ta sẽ bắt đầu tạo VPC tùy chỉnh để xây dựng network infrastructure cho ứng dụng.\n"},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/3-tao-vpc-tuy-chinh/","title":"Tạo VPC","tags":[],"description":"","content":"Tổng quan Trong chương này, chúng ta sẽ tạo một VPC (Virtual Private Cloud) tùy chỉnh thay vì sử dụng VPC mặc định của AWS. Điều này giúp chúng ta có kiểm soát tốt hơn về bảo mật và cấu trúc mạng.\nTại sao cần VPC tùy chỉnh? Bảo mật cao hơn: Kiểm soát chính xác traffic vào/ra Cô lập mạng: Tách biệt các tài nguyên Quản lý IP: Định nghĩa range IP riêng Kiến trúc rõ ràng: Public/Private subnets riêng biệt Kiến trúc VPC VPC (10.0.0.0/16)\r├── Public Subnet 1 - AZ a\r├── Public Subnet 2 - AZ b\r├── Private Subnet 1 - AZ a\r├── Private Subnet 2 - AZ b\r├── Internet Gateway\r├── NAT Gateway\r└── Route Tables Bước 1: Tạo VPC 1.1 Đăng nhập AWS Console Mở AWS Console Đăng nhập với tài khoản có quyền tạo VPC Chọn region: us-east-1 (Virginia) (hoặc region khác tuỳ chọn) 1.2 Tạo VPC mới Tìm và chọn service VPC Click Create VPC Chọn VPC and more (để tạo tự động các thành phần cơ bản) Cấu hình thông tin VPC:\nName tag: carrentalweb-vpc\nIPv4 CIDR block: 10.0.0.0/16\nIPv6 CIDR block: No IPv6 CIDR block\nTenancy: Default\nNumber of Availability Zones: 2\nNumber of public subnets: 2\nNumber of private subnets: 2\nNAT gateways: 1 per AZ\nVPC endpoints: None\nClick Create VPC 1.3 Kiểm tra VPC đã tạo Vào Your VPCs Xác nhận VPC carrentalweb-vpc đã được tạo Ghi lại VPC ID Bước 2: Kiểm tra các thành phần 2.1 Subnets Vào Subnets Xác nhận có 4 subnets: 2 public: carrentalweb-vpc-public-subnet-1, carrentalweb-vpc-public-subnet-2 2 private: carrentalweb-vpc-private-subnet-1, carrentalweb-vpc-private-subnet-2 Ghi lại Subnet IDs 2.2 Internet Gateway Vào Internet Gateways Xác nhận IGW đã attach với VPC carrentalweb-vpc 2.3 NAT Gateway Vào NAT Gateways Xác nhận trạng thái là Available Ghi lại NAT Gateway ID 2.4 Route Tables Vào Route Tables Xác nhận có 2 route tables: Public: 0.0.0.0/0 → Internet Gateway Private: 0.0.0.0/0 → NAT Gateway Bước 3: Tạo DB Subnet Group 3.1 Tạo DB Subnet Group cho RDS Tìm và chọn service Aurora and RDS Vào Subnet groups\nClick Create DB subnet group Điền thông tin:\nName: carrentalweb-db-subnet-group\nDescription: Subnet group for CarRentalWeb RDS\nVPC: carrentalweb-vpc\nAvailability Zones: us-east-1a, us-east-1b\nSubnets: chọn 2 private subnets\nClick Create Xác nhận tạo thành công Lưu ý quan trọng Chi phí: NAT Gateway có phí theo giờ và data transfer Bảo mật: Private subnets không thể truy cập trực tiếp từ internet High Availability: Sử dụng 2 AZ để đảm bảo tính sẵn sàng Backup: Lưu trữ thông tin VPC để tham khảo sau này Bước tiếp theo Sau khi tạo xong VPC tùy chỉnh, chúng ta sẽ tạo Security Groups để cấu hình bảo mật mạng cho các service.\n"},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/4-tao-security-groups/","title":"Tạo Security Groups","tags":[],"description":"","content":"Tổng quan Security Groups hoạt động như firewall ảo, kiểm soát traffic vào/ra cho các tài nguyên AWS. Trong chương này, chúng ta sẽ tạo các Security Groups cần thiết cho ứng dụng.\nCác Security Groups cần tạo Elastic Beanstalk Security Group: Cho phép HTTP/HTTPS từ internet RDS Security Group: Cho phép MySQL từ Elastic Beanstalk Bước 1: Tạo Security Group cho Elastic Beanstalk 1.1 Tạo Security Group Tìm và chọn service VPC\nVào Security Groups\nClick Create security group Điền thông tin:\nSecurity group name: carrentalweb-eb-sg\nDescription: Security group for CarRentalWeb Elastic Beanstalk\nVPC: carrentalweb-vpc\n1.2 Cấu hình Inbound Rules Trong tab Inbound rules Click Add rule Thêm các rules sau: Type Protocol Port Range Source Description HTTP TCP 80 0.0.0.0/0 Allow HTTP from internet HTTPS TCP 443 0.0.0.0/0 Allow HTTPS from internet 1.3 Cấu hình Outbound Rules Trong tab Outbound rules Giữ nguyên rule mặc định. 1.4 Tạo Security Group Click Create security group Ghi lại Security Group ID Bước 2: Tạo Security Group cho RDS (tương tự bước 1) 2.1 Tạo Security Group Click Create security group\nĐiền thông tin:\nSecurity group name: carrentalweb-rds-sg\nDescription: Security group for CarRentalWeb RDS MySQL\nVPC: carrentalweb-vpc\n2.2 Cấu hình Inbound Rules Trong tab Inbound rules Click Add rule Thêm rule: Type Protocol Port Range Source Description MySQL/Aurora TCP 3306 carrentalweb-eb-sg Allow MySQL from EB 2.3 Cấu hình Outbound Rules Trong tab Outbound rules Giữ nguyên rule mặc định. 2.4 Tạo Security Group Click Create security group Ghi lại Security Group ID Lưu ý quan trọng Principle of Least Privilege: Chỉ mở ports cần thiết Security Group References: Sử dụng Security Group ID thay vì IP Testing: Test connectivity trước khi deploy production Bước tiếp theo Sau khi tạo xong Security Groups, chúng ta sẽ tạo Aurora Serverless MySQL để thiết lập database cho ứng dụng.\n"},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/5-tao-aurora-database/","title":"Tạo Aurora Serverless MySQL","tags":[],"description":"","content":"Tổng quan Amazon Aurora Serverless MySQL là một database serverless tự động scale theo nhu cầu. Trong chương này, chúng ta sẽ tạo Aurora Serverless MySQL cluster để thay thế RDS MySQL thông thường.\nTại sao chọn Aurora Serverless? Serverless: Chỉ trả tiền khi sử dụng Auto Scaling: Tự động scale theo load Data API: Có thể dùng Query Editor MySQL Compatible: Tương thích với MySQL High Availability: Multi-AZ deployment Bước 1: Tạo Aurora Serverless Cluster 1.1 Đăng nhập RDS Console Tìm và chọn service Aurora and RDS Đảm bảo đang ở region us-east-1 (hoặc region tương ứng ở các bước trước) Click Create database 1.2 Cấu hình Database Choose a database creation method: Standard create Engine type: Amazon Aurora Edition: Aurora (MySQL-Compatible) Templates: Dev/Test (cho workshop development) DB cluster identifier: carrentalweb-aurora-cluster Master username: adminws Master password: Tạo password mạnh (VD: CarRental2024!) 1.3 Cấu hình Instance DB instance class: Chọn Serverless v2 Serverless configuration: Minimum Aurora capacity unit (ACU): 0.5 Maximum Aurora capacity unit (ACU): 1 Pause after inactivity: 5 minutes 1.4 Cấu hình Connectivity Virtual private cloud (VPC): carrentalweb-vpc Subnet group: Tạo mới carrentalweb-aurora-subnet-group Publicly accessible: Yes VPC security groups: carrentalweb-rds-sg Availability Zone: us-east-1a Database port: 3306 RDS Data API: Enable (bắt buộc để sử dụng Query Editor) 1.5 Cấu hình Database Authentication IAM database authentication: Enable (để sử dụng Query Editor) Kerberos authentication: Không cần 1.6 Cấu hình Additional Initial database name: carrentalweb Backup retention period: 7 days Enable encryption: Yes Enable deletion protection: No (cho development) 1.7 Tạo Database Click Create database Đợi status chuyển thành Available Bước 2: Test Query Editor 2.1 Truy cập Query Editor RDS Console → Query Editor Click Create query editor Database: Chọn carrentalweb-aurora-cluster Database user: adminws Database password: [PASSWORD] Click Connect to database Xác nhận kết nối thành công 2.2 Test Query -- Chọn database USE carrentalweb; -- Tạo bảng test CREATE TABLE test_table ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Insert data INSERT INTO test_table (name) VALUES (\u0026#39;Test Data\u0026#39;); -- Query data SELECT * FROM test_table; Xác nhận thành công Bước 3: Cấu hình Environment Variables 3.1 Lưu thông tin quan trọng AURORA_CLUSTER_ENDPOINT: carrentalweb-aurora-cluster.cluster-xxxxx.us-east-1.rds.amazonaws.com\rAURORA_WRITER_ENDPOINT: carrentalweb-aurora-cluster.cluster-ro-xxxxx.us-east-1.rds.amazonaws.com\rDATABASE_NAME: carrentalweb\rMASTER_USERNAME: adminws\rMASTER_PASSWORD: [PASSWORD] 3.2 Cấu hình cho Elastic Beanstalk Các biến môi trường sẽ được cấu hình trong chương 6:\nDB_HOST: [AURORA_CLUSTER_ENDPOINT]\rDB_NAME: carrentalweb\rDB_USERNAME: adminws\rDB_PASSWORD: [PASSWORD] Lưu ý quan trọng Serverless: Database sẽ pause sau 5 phút không sử dụng Data API: Cho phép sử dụng Query Editor Auto Scaling: Tự động scale từ 0.5 đến 1 ACU Cost: Chỉ trả tiền khi sử dụng Security: Đảm bảo Security Group chỉ cho phép EB access Troubleshooting Common Issues Data API not available: Đảm bảo đã enable Data API Query Editor connection failed: Kiểm tra IAM role permissions Database pause: Database sẽ pause sau 5 phút, query đầu tiên sẽ mất thời gian ACU limits: Tăng maximum ACU nếu cần performance cao hơn Bước tiếp theo Sau khi tạo xong Aurora Serverless MySQL, chúng ta sẽ Deploy Elastic Beanstalk để triển khai ứng dụng Spring Boot lên AWS.\n"},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/6-deploy-elastic-beanstalk/","title":"Deploy Elastic Beanstalk","tags":[],"description":"","content":"Tổng quan AWS Elastic Beanstalk là Platform as a Service (PaaS) giúp triển khai ứng dụng web một cách dễ dàng. Trong chương này, chúng ta sẽ deploy ứng dụng Spring Boot lên Elastic Beanstalk.\nTại sao chọn Elastic Beanstalk? Managed Platform: AWS quản lý infrastructure Auto Scaling: Tự động scale theo load Load Balancing: Health checks và traffic distribution Easy Deployment: Deploy từ source code hoặc JAR file Monitoring: CloudWatch integration Bước 1: Chuẩn bị ứng dụng 1.1 Build ứng dụng # Clean và build mvn clean package -DskipTests # Kiểm tra JAR file ls -la target/CarRentalWeb-1.0.0.jar Bước 2: Tạo Elastic Beanstalk Environment 2.1 Đăng nhập EB Console Tìm và chọn service Elastic Beanstalk Đảm bảo đang ở region us-east-1 (hoặc region tương ứng ở các bước trước) Click Create application 2.2 Cấu hình Application và Environment Trong Step 1: Configure environment: Environment tier: Chọn Web server environment Application name: carrentalweb-app Environment name: carrentalweb-prod Domain: carrentalweb-prod (hoặc để trống) Environment description: Production environment for CarRentalWeb Platform: Java Platform branch: Java 21 (Corretto) Platform version: 4.6.2 (Recommended) Application code: Chọn Upload your code Version label: 1.0.0 Chọn Local file Upload file JAR: CarRentalWeb-1.0.0.jar 2.3 Cấu hình Service Access Trong Step 2: Configure service access: Service role: Nếu có: aws-elasticbeanstalk-service-role Nếu không có: Click Create and use new service role → Tự động tạo EC2 instance profile: Nếu có: aws-elasticbeanstalk-ec2-role Nếu không có: Click Create and use new instance profile → Tự động tạo EC2 key pair: None (cho development) Click Next 2.4 Cấu hình Networking Trong Step 3: Set up networking, database, and tags: VPC: carrentalweb-vpc Public IP: Enabled Instance subnets: carrentalweb-vpc-public-subnet-1, carrentalweb-vpc-public-subnet-2 Load balancer subnets: carrentalweb-vpc-public-subnet-1, carrentalweb-vpc-public-subnet-2 Security groups: carrentalweb-eb-sg Click Next 2.5 Cấu hình Environment Variables Trong Step 4: Configure updates, monitoring, and logging: Environment properties: Thêm các biến với key là các giá trị đã lưu ở các bước trước DB_HOST: carrentalweb-aurora-cluster.cluster-xxxxxxxxx.us-east-1.rds.amazonaws.com\rDB_PORT: 3306\rDB_NAME: carrentalweb\rDB_USERNAME: adminws\rDB_PASSWORD: [AURORA_PASSWORD]\rMAIL_HOST: smtp.gmail.com\rMAIL_PORT: 587\rMAIL_USERNAME: [EMAIL]\rMAIL_PASSWORD: [EMAIL_PASSWORD]\rDDL_AUTO: update Click Next 2.6 Deploy Application Sau khi hoàn thành tất cả các Step, click Create Theo dõi quá trình deployment Đợi Health chuyển thành OK Bước 3: Kiểm tra ứng dụng 3.1 Test Application Mở browser Truy cập: http://[EB_URL]. Nếu hiện lên giao diện như sau thì đã deploy dự án thành công: Kiểm tra ứng dụng hoạt động Thêm /login, /register, /home vào sau đường dẫn để test giao diện 💡 Lỗi thường gặp: Elastic Beanstalk tự động detect sai port 8080 thay vì 5000\nLưu ý quan trọng Health Checks: Đảm bảo /health endpoint hoạt động Database Connection: Test kết nối database Environment Variables: Không commit sensitive data Bước tiếp theo Sau khi deploy thành công Elastic Beanstalk, chúng ta sẽ Test ứng dụng để đảm bảo mọi thứ hoạt động bình thường.\n"},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/7-test-ung-dung/","title":"Test ứng dụng","tags":[],"description":"","content":"Tổng quan Sau khi deploy thành công ứng dụng Spring Boot lên Elastic Beanstalk và kết nối với Aurora database, chúng ta cần test để đảm bảo mọi thứ hoạt động bình thường.\nMục tiêu test Kết nối database: Đảm bảo ứng dụng kết nối được với Aurora Chức năng cơ bản: Test các tính năng chính của ứng dụng Performance: Kiểm tra tốc độ phản hồi Data persistence: Đảm bảo dữ liệu được lưu trữ đúng Bước 1: Test kết nối database Mở browser Truy cập: http://[EB_URL]/health Kiểm tra response: { \u0026#34;status\u0026#34;: \u0026#34;UP\u0026#34;, \u0026#34;application\u0026#34;: \u0026#34;CarRentalWeb\u0026#34;, \u0026#34;timestamp\u0026#34;: 1234567890 } Bước 2: Test chức năng đăng ký 2.1 Test form đăng ký Truy cập: http://[EB_URL]/register Điền thông tin test: Tên hiển thị: testuser Email: [Email của bạn] Password: 123 Click Register Kiểm tra email nhập mã xác thực Xác nhận đăng ký thành công 2.2 Kiểm tra dữ liệu trong database Vào RDS Console → Query Editor Kết nối với carrentalweb-aurora-cluster Chạy query: USE carrentalweb; SELECT * FROM accounts WHERE full_name = \u0026#39;testuser\u0026#39;; Xác nhận user đã được tạo Bước 3: Test chức năng đăng nhập 3.1 Test đăng nhập Truy cập: http://[EB_URL]/login Đăng nhập với thông tin vừa tạo: Email: [Email đã đăng ký ở bước 1] Password: 123 Kiểm tra: Đăng nhập thành công Redirect về dashboard Session được tạo Bước 4: Tạo dữ liệu xe 4.1 Tạo bảng cars Vào RDS Console → Query Editor Kết nối với carrentalweb-aurora-cluster Chạy câu lệnh tạo bảng: USE carrentalweb; CREATE TABLE cars ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255) NOT NULL, brand VARCHAR(100) NOT NULL, price INT NOT NULL, status VARCHAR(50) DEFAULT \u0026#39;Sẵn sàng\u0026#39;, engine VARCHAR(100), seat INT, model VARCHAR(50), bodystyle VARCHAR(50), image VARCHAR(255) ); 4.2 Thêm dữ liệu xe Chạy câu lệnh INSERT để thêm xe: INSERT INTO cars (name, brand, price, status, engine, seat, model, bodystyle, image) VALUES (\u0026#39;Toyota Camry 2.5G\u0026#39;, \u0026#39;Toyota\u0026#39;, 1200000, \u0026#39;Sẵn sàng\u0026#39;, \u0026#39;2.5L 4-cylinder\u0026#39;, 5, \u0026#39;2023\u0026#39;, \u0026#39;Sedan\u0026#39;, \u0026#39;https://carshop.vn/wp-content/uploads/2022/07/hinh-nen-xe-oto-dep-7.jpg\u0026#39;), (\u0026#39;Honda City G\u0026#39;, \u0026#39;Honda\u0026#39;, 800000, \u0026#39;Sẵn sàng\u0026#39;, \u0026#39;1.5L i-VTEC\u0026#39;, 5, \u0026#39;2023\u0026#39;, \u0026#39;Sedan\u0026#39;, \u0026#39;honda-city.jpg\u0026#39;), (\u0026#39;Ford Ranger XLT\u0026#39;, \u0026#39;Ford\u0026#39;, 1500000, \u0026#39;Sẵn sàng\u0026#39;, \u0026#39;2.0L EcoBlue\u0026#39;, 5, \u0026#39;2023\u0026#39;, \u0026#39;Pickup\u0026#39;, \u0026#39;ford-ranger.jpg\u0026#39;); Xác nhận xe đã được thêm: SELECT * FROM cars; Bước 5: Test chức năng đặt xe 5.1 Test đặt xe Đăng nhập thành công Truy cập trang đặt xe Chọn Xem chi tiết trên thẻ xe Chọn nhận, ngày trả, dịch vụ (nếu có) Click Chọn đặt Nhập thông tin còn thiếu và chọn Đặt xe Xác nhận đặt thành công 5.2 Kiểm tra dữ liệu đặt xe Vào RDS Console → Query Editor Chạy query kiểm tra booking: USE carrentalweb; SELECT * FROM orders WHERE accountemail = [Email của bạn]; Xác nhận booking đã được tạo Bước tiếp theo Sau khi test thành công ứng dụng, chúng ta sẽ Cấu hình CI/CD để tự động hóa quá trình deployment với GitHub Actions.\n"},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/8-cau-hinh-ci-cd/","title":"Cấu hình CI/CD","tags":[],"description":"","content":"Tổng quan CI/CD (Continuous Integration/Continuous Deployment) giúp tự động hóa quá trình build, test và deploy ứng dụng. Trong chương này, chúng ta sẽ cấu hình GitHub Actions để tự động deploy ứng dụng Spring Boot lên Elastic Beanstalk.\nTại sao cần CI/CD? Tự động hóa: Giảm thiểu lỗi manual Nhanh chóng: Deploy nhanh và an toàn Consistency: Đảm bảo môi trường đồng nhất Rollback: Dễ dàng rollback về version cũ Monitoring: Theo dõi quá trình deploy Bước 1: Tạo IAM User cho CI/CD 1.1 Tạo IAM User Tìm và chọn dịch vụ IAM Chọn Users và chọn Create user User name: carrentalweb-cicd-user Click Next 1.2 Gán Permissions Chọn Attach policies directly Tìm và chọn: AdministratorAccess-AWSElasticBeanstalk AmazonS3FullAccess AmazonEC2FullAccess Click Next Click Create user Click vào tên user vừa tạo, chọn Create access key Click chọn Other, sau đó Next Click chọn Creat access key Xác nhận tạo thành công 1.3 Lưu thông tin quan trọng Access Key: AKIA...\rSecret Access Key: [SECRET_KEY] Bước 2: Cấu hình GitHub Secrets 2.1 Truy cập Repository Settings Vào GitHub repository Settings → Secrets and variables → Actions Click New repository secret 2.2 Thêm các Secrets AWS_ACCESS_KEY_ID: [ACCESS_KEY_ID]\rAWS_SECRET_ACCESS_KEY: [SECRET_ACCESS_KEY]\rAWS_REGION: us-east-1\rEB_APPLICATION_NAME: carrentalweb-app\rEB_ENVIRONMENT_NAME: carrentalweb-prod Bước 3: Tạo GitHub Actions Workflow 3.1 Tạo file deploy.yml Tạo file .github/workflows/deploy.yml:\nname: Deploy to AWS Elastic Beanstalk on: push: branches: [ main, master ] pull_request: branches: [ main, master ] jobs: deploy: runs-on: ubuntu-latest if: github.ref == \u0026#39;refs/heads/main\u0026#39; || github.ref == \u0026#39;refs/heads/master\u0026#39; steps: - uses: actions/checkout@v4 - name: Set up JDK 21 uses: actions/setup-java@v4 with: java-version: \u0026#39;21\u0026#39; distribution: \u0026#39;temurin\u0026#39; - name: Cache Maven packages uses: actions/cache@v3 with: path: ~/.m2 key: ${{ runner.os }}-m2-${{ hashFiles(\u0026#39;**/pom.xml\u0026#39;) }} restore-keys: ${{ runner.os }}-m2 - name: Build with Maven run: mvn clean package -DskipTests - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v4 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ secrets.AWS_REGION }} - name: Show deployment info run: | echo \u0026#34;Deploying to AWS Elastic Beanstalk...\u0026#34; echo \u0026#34;Application: ${{ secrets.EB_APPLICATION_NAME }}\u0026#34; echo \u0026#34;Environment: ${{ secrets.EB_ENVIRONMENT_NAME }}\u0026#34; echo \u0026#34;Region: ${{ secrets.AWS_REGION }}\u0026#34; - name: Deploy to EB uses: einaregilsson/beanstalk-deploy@v21 with: aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }} aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} application_name: ${{ secrets.EB_APPLICATION_NAME }} environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }} region: ${{ secrets.AWS_REGION }} version_label: ${{ github.sha }} deployment_package: target/CarRentalWeb-1.0.0.jar wait_for_deployment: true Bước 4: Test CI/CD Pipeline Tạo một thay đổi nhỏ trong code (VD: Thay chữ \u0026ldquo;Hi!\u0026rdquo; ở trang đăng nhập thành \u0026ldquo;Quốc Kiệt\u0026rdquo;) Sửa dòng 19 file /resource/templates/login.htmt: thay chữ Hi! sang Quốc Kiệt Kiểm tra giao diện trước khi push code mới Commit và push lên GitHub: git add . git commit -m \u0026#34;Test CI/CD Deployment\u0026#34; git push origin main Vào GitHub Repository → Actions tab, theo dõi GitHub Actions: Chờ trạng thái chuyển sang màu xanh lá 4.3 Kiểm tra deployment Vào Elastic Beanstalk Console Kiểm tra environment carrentalweb-prod Tab Events → Xem deployment events Truy cập lại URL ứng dụng để đảm bảo thay đổi đã được deploy 4.4 Test rollback (nếu cần) Nếu deployment có vấn đề: Vào Elastic Beanstalk Console Tab Application versions Chọn version cũ → Deploy Hoặc sử dụng GitHub Actions: Vào Actions → Deploy to AWS Elastic Beanstalk Click Re-run jobs với version cũ Lưu ý quan trọng Security: Không commit AWS credentials vào code Branch Protection: Bảo vệ main branch Rollback: Có thể rollback về version cũ Monitoring: Theo dõi deployment logs Cost: CI/CD không tốn chi phí đáng kể Bước tiếp theo Sau khi cấu hình xong CI/CD, chúng ta sẽ Dọn dẹp tài nguyên để xóa các tài nguyên AWS và tránh phát sinh chi phí không cần thiết.\n"},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/9-don-dep-tai-nguyen/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Tổng quan Sau khi hoàn thành workshop và test ứng dụng, bạn nên dọn dẹp các tài nguyên AWS để tránh phát sinh chi phí không cần thiết. Chương này sẽ hướng dẫn bạn xóa tất cả tài nguyên đã tạo theo thứ tự an toàn.\nTại sao cần dọn dẹp? Tiết kiệm chi phí: Tránh phát sinh chi phí không cần thiết Bảo mật: Xóa tài nguyên để tránh rủi ro bảo mật Quản lý: Giữ AWS account sạch sẽ Best Practice: Thói quen tốt khi làm việc với cloud Bước 1: Xóa Elastic Beanstalk Environment 1.1 Xóa Environment Vào Elastic Beanstalk Console → Environments Chọn environment carrentalweb-prod Click Actions → Terminate environment Nhập tên environment và chọn Terminate Xác nhận xoá thành công (Khi phía sau tên environment có chữ terminated) 1.2 Xóa Application Sau khi environment bị xóa Chọn application carrentalweb-app Click Actions → Delete application Nhập tên application để xác nhận và chọn Delete Tên application sẽ biến mất sau khi xoá thành công Bước 2: Xóa Aurora Serverless Cluster 2.1 Xóa Database Cluster Vào RDS Console → Databases Chọn cluster carrentalweb-aurora-cluster-instance-1 Click Actions → Delete Nhập delete me và chọn Delete Chọn tiếp cluster carrentalweb-aurora-cluster Click Actions → Delete Chọn như hình và chọn Delete DB Cluster Xác nhận xoá thành công 2.2 Xóa Subnet Group Vào RDS Console → Subnet groups Chọn carrentalweb-aurora-subnet-group Chọn Delete Click Delete lần nữa. Khi xoá thành công, tên của subnet group sẽ biến mất Bước 3: Xóa Security Groups 3.1 Xóa RDS Security Group Tìm carrentalweb-rds-sg Chọn → Actions → Delete security group Click Delete 3.2 Xóa EB Security Group (tương tự 3.1) Vào VPC Console → Security Groups Tìm carrentalweb-eb-sg Chọn → Actions → Delete security group Click Delete Bước 4: Xóa VPC 4.1 Xóa NAT Gateway Vào VPC Console → NAT gateways Chọn carrentalweb-nat-public1-us-east-1a Click Actions → Delete NAT gateway Nhập delete và Click Delete Thực hiện tương tự với NAT Gateway còn lại 4.2 Release Elastic IP Vào VPC Console → Elastic IPs Chọn EIP đang được sử dụng Click Actions → Release Elastic IPs Click Release 4.3 Xóa Internet Gateway Detach Internet Gateway:\nVào VPC Console → Internet gateways Chọn carrentalweb-igw Click Actions → Detach from VPC Click Detach internet gateway Xóa Internet Gateway:\nClick Actions → Delete internet gateway Nhập delete và Click Delete 4.4 Xóa VPC VPC Console → Your VPCs Chọn carrentalweb-vpc Click Actions → Delete VPC Nhập delete và Click Delete VPC và những cấu hình liên quan như Subnet, Route table cũng sẽ được xoá theo Bước 5: Xóa IAM Roles Vào IAM Console → Users Tìm carrentalweb-cicd-user Chọn → Delete Chọn Deactivate access key Sau đó nhập confirm và Click Delete user Lưu ý quan trọng Thứ tự xóa quan trọng: Environment/Application trước Database sau Security Groups sau khi không còn dependencies VPC cuối cùng Backup trước khi xóa: Database snapshots: Tạo snapshot nếu cần backup data Application code: Đảm bảo code đã được commit lên Git Configuration: Lưu lại cấu hình quan trọng Chi phí sau khi xóa: Aurora Serverless: Không còn chi phí EC2 instances: Không còn chi phí Load Balancer: Không còn chi phí Data transfer: Có thể còn một ít Troubleshooting Common Issues Cannot delete VPC: Kiểm tra còn tài nguyên nào trong VPC không Cannot delete Security Group: Kiểm tra còn instance nào dùng SG không Cannot delete Subnet: Kiểm tra còn resource nào trong subnet không Cannot delete IAM Role: Kiểm tra còn service nào dùng role không 🎉 Chúc mừng! Bạn đã hoàn thành workshop triển khai Spring Boot lên AWS với Elastic Beanstalk, Aurora Serverless MySQL và CI/CD.\nNhững gì bạn đã học được: Tạo VPC tùy chỉnh với bảo mật cao Thiết lập Aurora Serverless MySQL với Data API Deploy ứng dụng Spring Boot lên Elastic Beanstalk Cấu hình CI/CD pipeline với GitHub Actions Quản lý và dọn dẹp tài nguyên AWS Khám phá thêm: AWS Elastic Beanstalk Documentation Amazon Aurora Documentation GitHub Actions Documentation "},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://kietlqag.github.io/AWS_DeploySpringBoot_EB_Aurora_CICD/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]