[{"uri":"https://kietlqag.github.io/Workshop-template/","title":"AWS Workshop - Spring Boot Deployment","tags":[],"description":"","content":"Welcome to AWS Workshop Overview This workshop will guide you through deploying a Spring Boot project to AWS with Elastic Beanstalk and Aurora Serverless MySQL. You will learn how to build a complete infrastructure from VPC, database, application deployment and resource cleanup.\nMain Workshop Deploy Spring Boot to AWS with Elastic Beanstalk and Aurora Serverless MySQL\nDetailed step-by-step guide to:\nCreate custom VPC with high security Set up Aurora Serverless MySQL database Deploy Spring Boot application to Elastic Beanstalk Test application with database Configure automated CI/CD pipeline with GitHub Actions Clean up AWS resources "},{"uri":"https://kietlqag.github.io/Workshop-template/1-gioi-thieu/","title":"Introduction","tags":[],"description":"","content":"Deploy Spring Boot to AWS with Elastic Beanstalk, Aurora Serverless MySQL and CI/CD Overview This workshop will guide you through deploying a Spring Boot application to AWS using Elastic Beanstalk, connecting to Aurora Serverless MySQL, and setting up CI/CD pipeline with GitHub Actions.\nImplementation Steps Environment Preparation - Install tools and configure AWS Create Custom VPC - Build network infrastructure Create Security Groups - Configure network security Create Aurora Serverless MySQL - Set up Aurora database Deploy Elastic Beanstalk - Deploy Spring Boot application Configure CI/CD - Automate deployment with GitHub Actions Clean Up Resources - Delete AWS resources Expected Results After completing the workshop, we will have:\nSpring Boot application running on AWS Elastic Beanstalk Aurora Serverless MySQL database with Data API Custom VPC with high security Automated CI/CD pipeline with GitHub Actions Query Editor for database management Prerequisites AWS Account GitHub Account (for CI/CD) Basic knowledge of Spring Boot Basic understanding of AWS services "},{"uri":"https://kietlqag.github.io/Workshop-template/2-chuan-bi-moi-truong/","title":"Environment Preparation","tags":[],"description":"","content":"Overview Prepare environment and source code before deploying to AWS.\nRequirements AWS Account - Access to EC2, RDS, Elastic Beanstalk, VPC, IAM GitHub Account - For source code storage and CI/CD Git - Source code management Java 21 - Runtime for Spring Boot Maven - Build tool Download and Configure Source Code 1. Download Project # Clone from GitHub git clone https://github.com/kietlqag/AWS_Workshop.git # Or download ZIP: https://github.com/kietlqag/AWS_Workshop/archive/main.zip 2. Verify Project # Build project mvn clean package -DskipTests # Check JAR file ls -la target/CarRentalWeb-1.0.0.jar 3. Important Project Structure CarRentalWeb/\r├── pom.xml # Maven configuration\r├── Procfile # Elastic Beanstalk startup\r├── src/main/\r│ ├── java/hcmute/edu/vn/CarRentalWeb/\r│ │ ├── CarRentalWebApplication.java # Main class\r│ │ ├── SecurityConfig.java # Security configuration\r│ │ ├── controller/ # REST Controllers\r│ │ ├── service/ # Business Logic\r│ │ ├── repository/ # Data Access\r│ │ ├── entity/ # JPA Entities\r│ │ ├── dto/ # Data Transfer Objects\r│ │ ├── strategy/ # Design Patterns\r│ │ ├── observer/ # Design Patterns\r│ │ ├── singleton/ # Design Patterns\r│ │ └── decorator/ # Design Patterns\r│ └── resources/\r│ ├── application.properties # DB \u0026amp; Email config\r│ ├── static/ # CSS, JS, Images\r│ └── templates/ # Thymeleaf templates\r├── .ebextensions/ # Elastic Beanstalk config\r│ ├── 01_environment.config # Environment variables\r│ ├── 02_vpc.config # VPC configuration\r│ ├── 03_port.config # Port settings\r│ ├── 04_nginx.config # Nginx configuration\r│ ├── 05_force_port.config # Force port 5000\r│ ├── 06_selinux.config # SELinux settings\r│ └── nginx/conf.d/\r│ └── proxy.conf # Custom proxy config\r└── .github/workflows/ # CI/CD workflows\r└── deploy.yml # GitHub Actions GitHub Configuration 1. Create Repository Create new repository Push source code to GitHub 2. Verify git --version java --version # Java 21 mvn --version Notes Java 21: Ensure correct version Maven: Required for project build Git: For source code management and CI/CD Next Steps When environment and source code are ready, we will start creating Custom VPC to build network infrastructure for the application.\n"},{"uri":"https://kietlqag.github.io/Workshop-template/3-tao-vpc-tuy-chinh/","title":"Create VPC","tags":[],"description":"","content":"Overview In this chapter, we will create a custom VPC (Virtual Private Cloud) instead of using AWS default VPC. This gives us better control over security and network architecture.\nWhy Custom VPC? Higher Security: Precise control over inbound/outbound traffic Network Isolation: Separate resources IP Management: Define custom IP ranges Clear Architecture: Separate public/private subnets VPC Architecture VPC (10.0.0.0/16)\r├── Public Subnet 1 - AZ a\r├── Public Subnet 2 - AZ b\r├── Private Subnet 1 - AZ a\r├── Private Subnet 2 - AZ b\r├── Internet Gateway\r├── NAT Gateway\r└── Route Tables Step 1: Create VPC 1.1 Login to AWS Console Open AWS Console Login with account that has VPC creation permissions Select region: us-east-1 (Virginia) (or other region as preferred) 1.2 Create New VPC Find and select VPC service Click Create VPC Select VPC and more (to automatically create basic components) Configure VPC information:\nName tag: carrentalweb-vpc\nIPv4 CIDR block: 10.0.0.0/16\nIPv6 CIDR block: No IPv6 CIDR block\nTenancy: Default\nNumber of Availability Zones: 2\nNumber of public subnets: 2\nNumber of private subnets: 2\nNAT gateways: 1 per AZ\nVPC endpoints: None\nClick Create VPC 1.3 Verify VPC Creation Go to Your VPCs Confirm VPC carrentalweb-vpc has been created Note down VPC ID Step 2: Verify Components 2.1 Subnets Go to Subnets Confirm there are 4 subnets: 2 public: carrentalweb-vpc-public-subnet-1, carrentalweb-vpc-public-subnet-2 2 private: carrentalweb-vpc-private-subnet-1, carrentalweb-vpc-private-subnet-2 Note down Subnet IDs 2.2 Internet Gateway Go to Internet Gateways Confirm IGW is attached to VPC carrentalweb-vpc 2.3 NAT Gateway Go to NAT Gateways Confirm status is Available Note down NAT Gateway ID 2.4 Route Tables Go to Route Tables Confirm there are 2 route tables: Public: 0.0.0.0/0 → Internet Gateway Private: 0.0.0.0/0 → NAT Gateway Step 3: Create DB Subnet Group 3.1 Create DB Subnet Group for RDS Find and select Aurora and RDS service Go to Subnet groups\nClick Create DB subnet group Fill in information:\nName: carrentalweb-db-subnet-group\nDescription: Subnet group for CarRentalWeb RDS\nVPC: carrentalweb-vpc\nAvailability Zones: us-east-1a, us-east-1b\nSubnets: select 2 private subnets\nClick Create Confirm successful creation Important Notes Cost: NAT Gateway has hourly and data transfer fees Security: Private subnets cannot be accessed directly from internet High Availability: Using 2 AZs ensures availability Backup: Store VPC information for future reference Next Steps After creating the custom VPC, we will create Security Groups to configure network security for services.\n"},{"uri":"https://kietlqag.github.io/Workshop-template/4-tao-security-groups/","title":"Create Security Groups","tags":[],"description":"","content":"Overview Security Groups act as virtual firewalls, controlling inbound/outbound traffic for AWS resources. In this chapter, we will create the necessary Security Groups for the application.\nSecurity Groups to Create Elastic Beanstalk Security Group: Allow HTTP/HTTPS from internet RDS Security Group: Allow MySQL from Elastic Beanstalk Step 1: Create Security Group for Elastic Beanstalk 1.1 Create Security Group Find and select VPC service\nGo to Security Groups\nClick Create security group Fill in information:\nSecurity group name: carrentalweb-eb-sg\nDescription: Security group for CarRentalWeb Elastic Beanstalk\nVPC: carrentalweb-vpc\n1.2 Configure Inbound Rules In Inbound rules tab Click Add rule Add the following rules: Type Protocol Port Range Source Description HTTP TCP 80 0.0.0.0/0 Allow HTTP from internet HTTPS TCP 443 0.0.0.0/0 Allow HTTPS from internet 1.3 Configure Outbound Rules In Outbound rules tab Keep default rule. 1.4 Create Security Group Click Create security group Note down Security Group ID Step 2: Create Security Group for RDS (similar to step 1) 2.1 Create Security Group Click Create security group\nFill in information:\nSecurity group name: carrentalweb-rds-sg\nDescription: Security group for CarRentalWeb RDS MySQL\nVPC: carrentalweb-vpc\n2.2 Configure Inbound Rules In Inbound rules tab Click Add rule Add rule: Type Protocol Port Range Source Description MySQL/Aurora TCP 3306 carrentalweb-eb-sg Allow MySQL from EB 2.3 Configure Outbound Rules In Outbound rules tab Keep default rule. 2.4 Create Security Group Click Create security group Note down Security Group ID Important Notes Principle of Least Privilege: Only open necessary ports Security Group References: Use Security Group ID instead of IP Testing: Test connectivity before production deployment Next Steps After creating Security Groups, we will create Aurora Serverless MySQL to set up the database for the application.\n"},{"uri":"https://kietlqag.github.io/Workshop-template/5-tao-aurora-database/","title":"Create Aurora Serverless MySQL","tags":[],"description":"","content":"Overview Amazon Aurora Serverless MySQL is a serverless database that automatically scales based on demand. In this chapter, we will create an Aurora Serverless MySQL cluster to replace the standard RDS MySQL.\nWhy Choose Aurora Serverless? Serverless: Pay only when using Auto Scaling: Automatically scales based on load Data API: Can use Query Editor MySQL Compatible: Compatible with MySQL High Availability: Multi-AZ deployment Step 1: Create Aurora Serverless Cluster 1.1 Access RDS Console Find and select Aurora and RDS service Ensure you\u0026rsquo;re in region us-east-1 (or corresponding region from previous steps) Click Create database 1.2 Configure Database Choose a database creation method: Standard create Engine type: Amazon Aurora Edition: Aurora (MySQL-Compatible) Templates: Dev/Test (for workshop development) DB cluster identifier: carrentalweb-aurora-cluster Master username: adminws Master password: Create a strong password (e.g., CarRental2024!) 1.3 Configure Instance DB instance class: Select Serverless v2 Serverless configuration: Minimum Aurora capacity unit (ACU): 0.5 Maximum Aurora capacity unit (ACU): 1 Pause after inactivity: 5 minutes 1.4 Configure Connectivity Virtual private cloud (VPC): carrentalweb-vpc Subnet group: Create new carrentalweb-aurora-subnet-group Publicly accessible: Yes VPC security groups: carrentalweb-rds-sg Availability Zone: us-east-1a Database port: 3306 RDS Data API: Enable (required to use Query Editor) 1.5 Configure Database Authentication IAM database authentication: Enable (to use Query Editor) Kerberos authentication: Not needed 1.6 Configure Additional Initial database name: carrentalweb Backup retention period: 7 days Enable encryption: Yes Enable deletion protection: No (for development) 1.7 Create Database Click Create database Wait for status to change to Available Step 2: Test Query Editor 2.1 Access Query Editor RDS Console → Query Editor Click Create query editor Database: Select carrentalweb-aurora-cluster Database user: adminws Database password: [PASSWORD] Click Connect to database Confirm successful connection 2.2 Test Query -- Select database USE carrentalweb; -- Create test table CREATE TABLE test_table ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Insert data INSERT INTO test_table (name) VALUES (\u0026#39;Test Data\u0026#39;); -- Query data SELECT * FROM test_table; Confirm success Step 3: Configure Environment Variables 3.1 Save Important Information AURORA_CLUSTER_ENDPOINT: carrentalweb-aurora-cluster.cluster-xxxxx.us-east-1.rds.amazonaws.com\rAURORA_WRITER_ENDPOINT: carrentalweb-aurora-cluster.cluster-ro-xxxxx.us-east-1.rds.amazonaws.com\rDATABASE_NAME: carrentalweb\rMASTER_USERNAME: adminws\rMASTER_PASSWORD: [PASSWORD] 3.2 Configure for Elastic Beanstalk Environment variables will be configured in chapter 6:\nDB_HOST: [AURORA_CLUSTER_ENDPOINT]\rDB_NAME: carrentalweb\rDB_USERNAME: adminws\rDB_PASSWORD: [PASSWORD] Important Notes Serverless: Database will pause after 5 minutes of inactivity Data API: Allows use of Query Editor Auto Scaling: Automatically scales from 0.5 to 1 ACU Cost: Pay only when using Security: Ensure Security Group only allows EB access Troubleshooting Common Issues Data API not available: Ensure Data API is enabled Query Editor connection failed: Check IAM role permissions Database pause: Database will pause after 5 minutes, first query will take time ACU limits: Increase maximum ACU if higher performance is needed Next Step After creating Aurora Serverless MySQL, we will Deploy Elastic Beanstalk to deploy the Spring Boot application to AWS.\n"},{"uri":"https://kietlqag.github.io/Workshop-template/6-deploy-elastic-beanstalk/","title":"Deploy Elastic Beanstalk","tags":[],"description":"","content":"Overview AWS Elastic Beanstalk is a Platform as a Service (PaaS) that helps deploy web applications easily. In this chapter, we will deploy the Spring Boot application to Elastic Beanstalk.\nWhy Choose Elastic Beanstalk? Managed Platform: AWS manages the infrastructure Auto Scaling: Automatically scales based on load Load Balancing: Health checks and traffic distribution Easy Deployment: Deploy from source code or JAR file Monitoring: CloudWatch integration Step 1: Prepare the Application 1.1 Build the application # Clean and build mvn clean package -DskipTests # Check JAR file ls -la target/CarRentalWeb-1.0.0.jar Step 2: Create Elastic Beanstalk Environment 2.1 Access EB Console Find and select Elastic Beanstalk service Ensure you\u0026rsquo;re in us-east-1 region (or the region used in previous steps) Click Create application 2.2 Configure Application and Environment In Step 1: Configure environment: Environment tier: Select Web server environment Application name: carrentalweb-app Environment name: carrentalweb-prod Domain: carrentalweb-prod (or leave empty) Environment description: Production environment for CarRentalWeb Platform: Java Platform branch: Java 21 (Corretto) Platform version: 4.6.2 (Recommended) Application code: Select Upload your code Version label: 1.0.0 Select Local file Upload JAR file: CarRentalWeb-1.0.0.jar 2.3 Configure Service Access In Step 2: Configure service access: Service role: If exists: aws-elasticbeanstalk-service-role If not: Click Create and use new service role → Auto-create EC2 instance profile: If exists: aws-elasticbeanstalk-ec2-role If not: Click Create and use new instance profile → Auto-create EC2 key pair: None (for development) Click Next 2.4 Configure Networking In Step 3: Set up networking, database, and tags: VPC: carrentalweb-vpc Public IP: Enabled Instance subnets: carrentalweb-vpc-public-subnet-1, carrentalweb-vpc-public-subnet-2 Load balancer subnets: carrentalweb-vpc-public-subnet-1, carrentalweb-vpc-public-subnet-2 Security groups: carrentalweb-eb-sg Click Next 2.5 Configure Environment Variables In Step 4: Configure updates, monitoring, and logging: Environment properties: Add variables with keys saved from previous steps DB_HOST: carrentalweb-aurora-cluster.cluster-xxxxxxxxx.us-east-1.rds.amazonaws.com\rDB_PORT: 3306\rDB_NAME: carrentalweb\rDB_USERNAME: adminws\rDB_PASSWORD: [AURORA_PASSWORD]\rMAIL_HOST: smtp.gmail.com\rMAIL_PORT: 587\rMAIL_USERNAME: [EMAIL]\rMAIL_PASSWORD: [EMAIL_PASSWORD]\rDDL_AUTO: update Click Next 2.6 Deploy Application After completing all Steps, click Create Monitor deployment process Wait for Health to turn OK Step 3: Test the Application 3.1 Test Application Open browser Visit: http://[EB_URL]. If you see the interface below, the project has been deployed successfully: Check application functionality Add /login, /register, /home to the URL to test interfaces 💡 Common Issue: Elastic Beanstalk automatically detects wrong port 8080 instead of 5000\nImportant Notes Health Checks: Ensure /health endpoint works Database Connection: Test database connectivity Environment Variables: Don\u0026rsquo;t commit sensitive data Next Steps After successfully deploying Elastic Beanstalk, we will Test the Application to ensure everything works properly.\n"},{"uri":"https://kietlqag.github.io/Workshop-template/7-test-ung-dung/","title":"Test Application","tags":[],"description":"","content":"Overview After successfully deploying the Spring Boot application to Elastic Beanstalk and connecting to the Aurora database, we need to test to ensure everything works properly.\nTest Objectives Database Connection: Ensure the application can connect to Aurora Basic Functions: Test the main features of the application Performance: Check response speed Data Persistence: Ensure data is stored correctly Step 1: Test Database Connection Open browser Access: http://[EB_URL]/health Check response: { \u0026#34;status\u0026#34;: \u0026#34;UP\u0026#34;, \u0026#34;application\u0026#34;: \u0026#34;CarRentalWeb\u0026#34;, \u0026#34;timestamp\u0026#34;: 1234567890 } Step 2: Test Registration Function 2.1 Test Registration Form Access: http://[EB_URL]/register Fill in test information: Display Name: testuser Email: [Your Email] Password: 123 Click Register Check email for verification code Confirm successful registration 2.2 Check Data in Database Go to RDS Console → Query Editor Connect to carrentalweb-aurora-cluster Run query: USE carrentalweb; SELECT * FROM accounts WHERE full_name = \u0026#39;testuser\u0026#39;; Confirm user has been created Step 3: Test Login Function 3.1 Test Login Access: http://[EB_URL]/login Login with information just created: Email: [Email registered in step 1] Password: 123 Check: Login successful Redirect to dashboard Session created Step 4: Create Car Data 4.1 Create Cars Table Go to RDS Console → Query Editor Connect to carrentalweb-aurora-cluster Run command to create table: USE carrentalweb; CREATE TABLE cars ( id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255) NOT NULL, brand VARCHAR(100) NOT NULL, price INT NOT NULL, status VARCHAR(50) DEFAULT \u0026#39;Sẵn sàng\u0026#39;, engine VARCHAR(100), seat INT, model VARCHAR(50), bodystyle VARCHAR(50), image VARCHAR(255) ); 4.2 Add Car Data Run INSERT command to add cars: INSERT INTO cars (name, brand, price, status, engine, seat, model, bodystyle, image) VALUES (\u0026#39;Toyota Camry 2.5G\u0026#39;, \u0026#39;Toyota\u0026#39;, 1200000, \u0026#39;Sẵn sàng\u0026#39;, \u0026#39;2.5L 4-cylinder\u0026#39;, 5, \u0026#39;2023\u0026#39;, \u0026#39;Sedan\u0026#39;, \u0026#39;https://carshop.vn/wp-content/uploads/2022/07/hinh-nen-xe-oto-dep-7.jpg\u0026#39;), (\u0026#39;Honda City G\u0026#39;, \u0026#39;Honda\u0026#39;, 800000, \u0026#39;Sẵn sàng\u0026#39;, \u0026#39;1.5L i-VTEC\u0026#39;, 5, \u0026#39;2023\u0026#39;, \u0026#39;Sedan\u0026#39;, \u0026#39;honda-city.jpg\u0026#39;), (\u0026#39;Ford Ranger XLT\u0026#39;, \u0026#39;Ford\u0026#39;, 1500000, \u0026#39;Sẵn sàng\u0026#39;, \u0026#39;2.0L EcoBlue\u0026#39;, 5, \u0026#39;2023\u0026#39;, \u0026#39;Pickup\u0026#39;, \u0026#39;ford-ranger.jpg\u0026#39;); Confirm cars have been added: SELECT * FROM cars; Step 5: Test Car Booking Function 5.1 Test Car Booking Login successfully Access car booking page Select View Details on car card Choose pickup date, return date, services (if any) Click Choose Booking Enter missing information and select Book Car Confirm successful booking 5.2 Check Booking Data Go to RDS Console → Query Editor Run query to check booking: USE carrentalweb; SELECT * FROM orders WHERE accountemail = [Your Email]; Confirm booking has been created Next Step After successfully testing the application, we will Configure CI/CD to automate the deployment process with GitHub Actions.\n"},{"uri":"https://kietlqag.github.io/Workshop-template/8-cau-hinh-ci-cd/","title":"Configure CI/CD","tags":[],"description":"","content":"Overview CI/CD (Continuous Integration/Continuous Deployment) helps automate the process of building, testing, and deploying applications. In this chapter, we will configure GitHub Actions to automatically deploy the Spring Boot application to Elastic Beanstalk.\nWhy do we need CI/CD? Automation: Minimize manual errors Speed: Fast and safe deployment Consistency: Ensure consistent environment Rollback: Easily rollback to previous version Monitoring: Track deployment process Step 1: Create IAM User for CI/CD 1.1 Create IAM User Find and select IAM service Select Users and choose Create user User name: carrentalweb-cicd-user Click Next 1.2 Assign Permissions Select Attach policies directly Find and select: AdministratorAccess-AWSElasticBeanstalk AmazonS3FullAccess AmazonEC2FullAccess Click Next Click Create user Click on the created user name, select Create access key Click select Other, then Next Click select Create access key Confirm successful creation 1.3 Save Important Information Access Key: AKIA...\rSecret Access Key: [SECRET_KEY] Step 2: Configure GitHub Secrets 2.1 Access Repository Settings Go to GitHub repository Settings → Secrets and variables → Actions Click New repository secret 2.2 Add Secrets AWS_ACCESS_KEY_ID: [ACCESS_KEY_ID]\rAWS_SECRET_ACCESS_KEY: [SECRET_ACCESS_KEY]\rAWS_REGION: us-east-1\rEB_APPLICATION_NAME: carrentalweb-app\rEB_ENVIRONMENT_NAME: carrentalweb-prod Step 3: Create GitHub Actions Workflow 3.1 Create deploy.yml file Create file .github/workflows/deploy.yml:\nname: Deploy to AWS Elastic Beanstalk on: push: branches: [ main, master ] pull_request: branches: [ main, master ] jobs: deploy: runs-on: ubuntu-latest if: github.ref == \u0026#39;refs/heads/main\u0026#39; || github.ref == \u0026#39;refs/heads/master\u0026#39; steps: - uses: actions/checkout@v4 - name: Set up JDK 21 uses: actions/setup-java@v4 with: java-version: \u0026#39;21\u0026#39; distribution: \u0026#39;temurin\u0026#39; - name: Cache Maven packages uses: actions/cache@v3 with: path: ~/.m2 key: ${{ runner.os }}-m2-${{ hashFiles(\u0026#39;**/pom.xml\u0026#39;) }} restore-keys: ${{ runner.os }}-m2 - name: Build with Maven run: mvn clean package -DskipTests - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v4 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ secrets.AWS_REGION }} - name: Show deployment info run: | echo \u0026#34;Deploying to AWS Elastic Beanstalk...\u0026#34; echo \u0026#34;Application: ${{ secrets.EB_APPLICATION_NAME }}\u0026#34; echo \u0026#34;Environment: ${{ secrets.EB_ENVIRONMENT_NAME }}\u0026#34; echo \u0026#34;Region: ${{ secrets.AWS_REGION }}\u0026#34; - name: Deploy to EB uses: einaregilsson/beanstalk-deploy@v21 with: aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }} aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} application_name: ${{ secrets.EB_APPLICATION_NAME }} environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }} region: ${{ secrets.AWS_REGION }} version_label: ${{ github.sha }} deployment_package: target/CarRentalWeb-1.0.0.jar wait_for_deployment: true Step 4: Test CI/CD Pipeline Make a small change in the code (e.g., Change \u0026ldquo;Hi!\u0026rdquo; on the login page to \u0026ldquo;Quoc Kiet\u0026rdquo;) Edit line 19 of file /resource/templates/login.html: change \u0026ldquo;Hi!\u0026rdquo; to \u0026ldquo;Quoc Kiet\u0026rdquo; Check the interface before pushing new code Commit and push to GitHub: git add . git commit -m \u0026#34;Test CI/CD Deployment\u0026#34; git push origin main Go to GitHub Repository → Actions tab, monitor GitHub Actions: Wait for status to turn green 4.3 Check deployment Go to Elastic Beanstalk Console Check environment carrentalweb-prod Events tab → View deployment events Access the application URL again to ensure changes have been deployed 4.4 Test rollback (if needed) If deployment has issues: Go to Elastic Beanstalk Console Application versions tab Select old version → Deploy Or use GitHub Actions: Go to Actions → Deploy to AWS Elastic Beanstalk Click Re-run jobs with old version Important Notes Security: Don\u0026rsquo;t commit AWS credentials to code Branch Protection: Protect main branch Rollback: Can rollback to previous version Monitoring: Monitor deployment logs Cost: CI/CD doesn\u0026rsquo;t cost significantly Next Step After configuring CI/CD, we will Clean up resources to delete AWS resources and avoid unnecessary costs.\n"},{"uri":"https://kietlqag.github.io/Workshop-template/9-don-dep-tai-nguyen/","title":"Clean up Resources","tags":[],"description":"","content":"Overview After completing the workshop and testing the application, you should clean up AWS resources to avoid unnecessary costs. This chapter will guide you through deleting all created resources in a safe order.\nWhy do we need to clean up? Cost Savings: Avoid unnecessary costs Security: Delete resources to avoid security risks Management: Keep AWS account clean Best Practice: Good habit when working with cloud Step 1: Delete Elastic Beanstalk Environment 1.1 Delete Environment Go to Elastic Beanstalk Console → Environments Select environment carrentalweb-prod Click Actions → Terminate environment Enter environment name and select Terminate Confirm successful deletion (When \u0026ldquo;terminated\u0026rdquo; appears after the environment name) 1.2 Delete Application After the environment is deleted Select application carrentalweb-app Click Actions → Delete application Enter application name to confirm and select Delete Application name will disappear after successful deletion Step 2: Delete Aurora Serverless Cluster 2.1 Delete Database Cluster Go to RDS Console → Databases Select cluster carrentalweb-aurora-cluster-instance-1 Click Actions → Delete Enter delete me and select Delete Select cluster carrentalweb-aurora-cluster Click Actions → Delete Select as shown and choose Delete DB Cluster Confirm successful deletion 2.2 Delete Subnet Group Go to RDS Console → Subnet groups Select carrentalweb-aurora-subnet-group Select Delete Click Delete again. When successfully deleted, the subnet group name will disappear Step 3: Delete Security Groups 3.1 Delete RDS Security Group Find carrentalweb-rds-sg Select → Actions → Delete security group Click Delete 3.2 Delete EB Security Group (similar to 3.1) Go to VPC Console → Security Groups Find carrentalweb-eb-sg Select → Actions → Delete security group Click Delete Step 4: Delete VPC 4.1 Delete NAT Gateway Go to VPC Console → NAT gateways Select carrentalweb-nat-public1-us-east-1a Click Actions → Delete NAT gateway Enter delete and Click Delete Perform the same for the remaining NAT Gateway 4.2 Release Elastic IP Go to VPC Console → Elastic IPs Select the EIP being used Click Actions → Release Elastic IPs Click Release 4.3 Delete Internet Gateway Detach Internet Gateway:\nGo to VPC Console → Internet gateways Select carrentalweb-igw Click Actions → Detach from VPC Click Detach internet gateway Delete Internet Gateway:\nClick Actions → Delete internet gateway Enter delete and Click Delete 4.4 Delete VPC VPC Console → Your VPCs Select carrentalweb-vpc Click Actions → Delete VPC Enter delete and Click Delete VPC and related configurations like Subnet, Route table will also be deleted Step 5: Delete IAM Roles Go to IAM Console → Users Find carrentalweb-cicd-user Select → Delete Select Deactivate access key Then enter confirm and Click Delete user Important Notes Important deletion order: Environment/Application first Database after Security Groups after no dependencies VPC last Backup before deletion: Database snapshots: Create snapshot if you need to backup data Application code: Ensure code has been committed to Git Configuration: Save important configurations Costs after deletion: Aurora Serverless: No more costs EC2 instances: No more costs Load Balancer: No more costs Data transfer: May still have some Troubleshooting Common Issues Cannot delete VPC: Check if there are any resources left in VPC Cannot delete Security Group: Check if any instances are using SG Cannot delete Subnet: Check if any resources are in subnet Cannot delete IAM Role: Check if any services are using the role 🎉 Congratulations! You have completed the workshop on deploying Spring Boot to AWS with Elastic Beanstalk, Aurora Serverless MySQL, and CI/CD.\nWhat you have learned: Create custom VPC with high security Set up Aurora Serverless MySQL with Data API Deploy Spring Boot application to Elastic Beanstalk Configure CI/CD pipeline with GitHub Actions Manage and clean up AWS resources Explore more: AWS Elastic Beanstalk Documentation Amazon Aurora Documentation GitHub Actions Documentation "},{"uri":"https://kietlqag.github.io/Workshop-template/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://kietlqag.github.io/Workshop-template/tags/","title":"Tags","tags":[],"description":"","content":""}]